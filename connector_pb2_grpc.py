# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import connector_pb2 as connector__pb2


class ConnectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.triggers = channel.unary_unary(
                '/grpc.Connector/triggers',
                request_serializer=connector__pb2.TriggersRequest.SerializeToString,
                response_deserializer=connector__pb2.TriggersResponse.FromString,
                )
        self.perform_trigger = channel.unary_unary(
                '/grpc.Connector/perform_trigger',
                request_serializer=connector__pb2.TriggerRequest.SerializeToString,
                response_deserializer=connector__pb2.TriggerResponse.FromString,
                )
        self.actions = channel.unary_unary(
                '/grpc.Connector/actions',
                request_serializer=connector__pb2.ActionsRequest.SerializeToString,
                response_deserializer=connector__pb2.ActionsResponse.FromString,
                )
        self.perform_action = channel.unary_unary(
                '/grpc.Connector/perform_action',
                request_serializer=connector__pb2.ActionRequest.SerializeToString,
                response_deserializer=connector__pb2.ActionResponse.FromString,
                )


class ConnectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def triggers(self, request, context):
        """used by Workflows to get triggers defined by the Connector. Run when a user registers or refreshes a Connector.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def perform_trigger(self, request, context):
        """used by Workflows to check for trigger events. Polled periodically.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def actions(self, request, context):
        """used by Workflows to get get actions defined by the Connector. Run when a user registers or refreshes a Connector.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def perform_action(self, request, context):
        """used by Workflows to perform an action defined by the Connector. Run when a Workflow containing the defined action is run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'triggers': grpc.unary_unary_rpc_method_handler(
                    servicer.triggers,
                    request_deserializer=connector__pb2.TriggersRequest.FromString,
                    response_serializer=connector__pb2.TriggersResponse.SerializeToString,
            ),
            'perform_trigger': grpc.unary_unary_rpc_method_handler(
                    servicer.perform_trigger,
                    request_deserializer=connector__pb2.TriggerRequest.FromString,
                    response_serializer=connector__pb2.TriggerResponse.SerializeToString,
            ),
            'actions': grpc.unary_unary_rpc_method_handler(
                    servicer.actions,
                    request_deserializer=connector__pb2.ActionsRequest.FromString,
                    response_serializer=connector__pb2.ActionsResponse.SerializeToString,
            ),
            'perform_action': grpc.unary_unary_rpc_method_handler(
                    servicer.perform_action,
                    request_deserializer=connector__pb2.ActionRequest.FromString,
                    response_serializer=connector__pb2.ActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.Connector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Connector(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def triggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.Connector/triggers',
            connector__pb2.TriggersRequest.SerializeToString,
            connector__pb2.TriggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def perform_trigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.Connector/perform_trigger',
            connector__pb2.TriggerRequest.SerializeToString,
            connector__pb2.TriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def actions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.Connector/actions',
            connector__pb2.ActionsRequest.SerializeToString,
            connector__pb2.ActionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def perform_action(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.Connector/perform_action',
            connector__pb2.ActionRequest.SerializeToString,
            connector__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
